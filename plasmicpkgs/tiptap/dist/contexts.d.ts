import { Mark, Node } from "@tiptap/core";
import type { BoldOptions } from "@tiptap/extension-bold";
import type { CodeOptions } from "@tiptap/extension-code";
import type { ItalicOptions } from "@tiptap/extension-italic";
import type { LinkOptions } from "@tiptap/extension-link";
import type { MentionOptions } from "@tiptap/extension-mention";
import type { StrikeOptions } from "@tiptap/extension-strike";
import type { UnderlineOptions } from "@tiptap/extension-underline";
import React from "react";
export declare const RESET_TIMEOUT_MS = 500;
export interface TiptapContextProps {
    bold?: Mark<BoldOptions>;
    setBold: (boldOptions?: Mark<BoldOptions>) => void;
    code?: Mark<CodeOptions>;
    setCode: (codeOptions?: Mark<CodeOptions>) => void;
    italic?: Mark<ItalicOptions>;
    setItalic: (italicOptions?: Mark<ItalicOptions>) => void;
    link?: Mark<LinkOptions>;
    setLink: (linkOptions?: Mark<LinkOptions>) => void;
    mention?: Node<MentionOptions>;
    setMention: (mentionOptions?: Node<MentionOptions>) => void;
    strike?: Mark<StrikeOptions>;
    setStrike: (strikeOptions?: Mark<StrikeOptions>) => void;
    underline?: Mark<UnderlineOptions>;
    setUnderline: (underlineOptions?: Mark<UnderlineOptions>) => void;
}
export declare const allExtensions: Extract<keyof TiptapContextProps, string>[];
export declare const TiptapContext: React.Context<TiptapContextProps | undefined>;
export declare const useTiptapContext: () => TiptapContextProps;
export declare const TiptapContextProvider: ({ children }: any) => React.JSX.Element;
