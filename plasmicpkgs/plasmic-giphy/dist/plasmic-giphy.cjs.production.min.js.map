{"version":3,"file":"plasmic-giphy.cjs.production.min.js","sources":["../src/giphy.tsx","../src/hooks/useFetch.ts","../src/index.tsx"],"sourcesContent":["import { GiphyFetch } from \"@giphy/js-fetch-api\";\nimport { IGif } from \"@giphy/js-types\";\nimport { ComponentMeta } from \"@plasmicapp/host\";\nimport React, { useEffect, useState } from \"react\";\nimport { useFetch } from \"./hooks/useFetch\";\n\nexport function ensure<T>(x: T | null | undefined): T {\n  if (x === null || x === undefined) {\n    debugger;\n    throw new Error(`Value must not be undefined or null`);\n  } else {\n    return x;\n  }\n}\n\nconst modulePath = \"@plasmicpkgs/plasmic-giphy\";\n\ninterface GiphyProps {\n  searchTerm: string;\n  className: string;\n  noLayout?: boolean;\n}\n\nexport const GiphyMeta: ComponentMeta<GiphyProps> = {\n  name: \"hostless-giphy\",\n  displayName: \"Giphy\",\n  importName: \"Giphy\",\n  importPath: modulePath,\n  providesData: true,\n  description: \"Fetches Giphy data and render it\",\n  props: {\n    searchTerm: {\n      type: \"string\",\n      displayName: \"Search Term\",\n      description: \"Search term for fetching gif \",\n      defaultValue: \"Cat\",\n    },\n  },\n};\n\nexport function Giphy({ searchTerm, className }: GiphyProps) {\n  const id = useFetch({ keyword: searchTerm });\n  const [gif, setGif] = useState<IGif | null>(null);\n\n  const gf = new GiphyFetch(\"X1q3afkDR9WHSZJhLS6H9yYTQMPIWOTK\");\n  useEffect(() => {\n    const fetchGif = async () => {\n      if (!id) {\n        return null;\n      }\n      const { data } = await gf.gif(id);\n      setGif(data);\n      return data;\n    };\n    fetchGif();\n  }, [id]);\n\n  return (\n    <img\n      src={gif?.images.downsized_medium.url}\n      alt=\"Gif\"\n      className={className}\n    />\n  );\n}\n","import { useState, useEffect } from \"react\";\n\ninterface HookProps {\n    keyword: string\n}\nexport const useFetch = ({ keyword }: HookProps) => {\n    const [giphyId, setGiphyId] = useState(\"\");\n\n    useEffect(() => {\n        if (keyword) fetchGiphy();\n    }, [keyword]);\n\n    const fetchGiphy = async () => {\n        try {\n            const response = await fetch(\n                `https://api.giphy.com/v1/gifs/search?api_key=X1q3afkDR9WHSZJhLS6H9yYTQMPIWOTK&q=${keyword\n                    .split(\" \")\n                    .join(\"\")}&limit=1`\n            );\n\n            const { data } = await response.json();\n\n            setGiphyId(data[0]?.id);\n        } catch (error) {\n            console.log(\"Error in gif api retrieval: \", error);\n            setGiphyId(\"\");\n        }\n    };\n    return giphyId;\n};\n","import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport registerGlobalContext from \"@plasmicapp/host/registerGlobalContext\";\n\nimport { Giphy, GiphyMeta } from \"./giphy\";\n\nexport function registerAll(loader?: {\n  registerComponent: typeof registerComponent;\n  registerGlobalContext: typeof registerGlobalContext;\n}) {\n  const _registerComponent = <T extends React.ComponentType<any>>(\n    Component: T,\n    defaultMeta: ComponentMeta<React.ComponentProps<T>>\n  ) => {\n    if (loader) {\n      loader.registerComponent(Component, defaultMeta);\n    } else {\n      registerComponent(Component, defaultMeta);\n    }\n  };\n\n  _registerComponent(Giphy, GiphyMeta);\n}\n\nexport * from \"./giphy\";\n"],"names":["GiphyMeta","name","displayName","importName","importPath","providesData","description","props","searchTerm","type","defaultValue","Giphy","_ref","className","id","keyword","_useState","useState","giphyId","setGiphyId","useEffect","fetchGiphy","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_data$","response","wrap","_context","prev","next","fetch","split","join","sent","json","data","t0","console","log","stop","apply","arguments","useFetch","gif","setGif","gf","GiphyFetch","abrupt","fetchGif","React","src","images","downsized_medium","url","alt","x","Error","loader","Component","defaultMeta","registerComponent"],"mappings":"w5NAeA,IAQaA,EAAuC,CAClDC,KAAM,iBACNC,YAAa,QACbC,WAAY,QACZC,WAZiB,6BAajBC,cAAc,EACdC,YAAa,mCACbC,MAAO,CACLC,WAAY,CACVC,KAAM,SACNP,YAAa,cACbI,YAAa,gCACbI,aAAc,kBAKJC,EAAKC,OAAeC,EAASD,EAATC,UAC5BC,ECpCgB,SAAHF,OAAMG,EAAOH,EAAPG,QACvBC,EAA8BC,WAAS,IAAhCC,EAAOF,KAAEG,EAAUH,KAE1BI,aAAU,WACFL,GAASM,MACd,CAACN,IAEJ,IAAMM,aAAU,IAAAC,EAAAC,EAAAC,IAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,IAAAK,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAA,OAAAF,EAAAC,OAAAD,EAAAE,OAEYC,yFACgElB,EAC9EmB,MAAM,KACNC,KAAK,gBACb,OAJa,OAARP,EAAQE,EAAAM,KAAAN,EAAAE,OAMSJ,EAASS,OAAM,OAEtClB,SAAUQ,EAF4BG,EAAAM,KAA9BE,KAEQ,WAALX,EAASb,IAAIgB,EAAAE,QAAA,MAAA,QAAAF,EAAAC,QAAAD,EAAAS,GAAAT,WAExBU,QAAQC,IAAI,+BAA8BX,EAAAS,IAC1CpB,EAAW,IAAI,QAAA,UAAA,OAAAW,EAAAY,UAAAhB,qBAEtB,kBAfe,OAAAJ,EAAAqB,WAAAC,eAgBhB,OAAO1B,EDaE2B,CAAS,CAAE9B,QADUH,EAAVJ,aAEtBQ,EAAsBC,WAAsB,MAArC6B,EAAG9B,KAAE+B,EAAM/B,KAEZgC,EAAK,IAAIC,aAAW,oCAa1B,OAZA7B,aAAU,uBACM,IAAAE,EAAAC,EAAAC,IAAAC,MAAG,SAAAC,IAAA,IAAAY,EAAA,OAAAd,IAAAK,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAA,GACVlB,GAAEgB,EAAAE,OAAA,MAAA,OAAAF,EAAAoB,gBACE,MAAI,OAAA,OAAApB,EAAAE,OAEUgB,EAAGF,IAAIhC,GAAG,OACpB,OAAbiC,EADQT,EAAyBR,EAAAM,KAAzBE,MACKR,EAAAoB,gBACNZ,GAAI,OAAA,UAAA,OAAAR,EAAAY,UAAAhB,OACZ,kBAPa,OAAAJ,EAAAqB,WAAAC,cAQdO,KACC,CAACrC,IAGFsC,uBACEC,UAAKP,SAAAA,EAAKQ,OAAOC,iBAAiBC,IAClCC,IAAI,MACJ5C,UAAWA,gEAvDS6C,GACxB,GAAIA,MAAAA,EAEF,MAAM,IAAIC,6CAEV,OAAOD,gCEJiBE,GAI1B,IACEC,EACAC,EADAD,EAUiBlD,EATjBmD,EASwB9D,EAPpB4D,EACFA,EAAOG,kBAAkBF,EAAWC,GAEpCC,EAAkBF,EAAWC"}