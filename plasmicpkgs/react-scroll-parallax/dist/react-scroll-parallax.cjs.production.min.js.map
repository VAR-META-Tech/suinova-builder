{"version":3,"file":"react-scroll-parallax.cjs.production.min.js","sources":["../src/ParallaxWrapper.tsx","../src/ParallaxProvider.tsx"],"sourcesContent":["import { PlasmicCanvasContext } from \"@plasmicapp/host\";\nimport registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport React, { useContext } from \"react\";\nimport { Parallax, ParallaxContext } from \"react-scroll-parallax\";\n\nexport interface ParallaxWrapperProps {\n  speed?: number;\n  disabled?: boolean;\n  previewInEditor?: boolean;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport default function ParallaxWrapper({\n  speed,\n  disabled,\n  previewInEditor,\n  children,\n  className,\n}: ParallaxWrapperProps) {\n  const inEditor = useContext(PlasmicCanvasContext);\n  const hasContext = useContext(ParallaxContext) != null;\n  const isServer = typeof window === \"undefined\";\n  if (!hasContext && !isServer) {\n    throw new Error(\n      \"Scroll Parallax can only be instantiated somewhere inside the Parallax Provider\"\n    );\n  }\n  return (\n    <Parallax\n      disabled={disabled || (inEditor && !previewInEditor)}\n      speed={speed}\n      className={className}\n    >\n      {children}\n    </Parallax>\n  );\n}\n\n/**\n * We're keeping the old registration without attachments to avoid confusion\n * due to the parallax custom behavior not working in old projects that didn't\n * make use of global contexts (so simply adding the custom behavior would\n * break it and it wouldn't be clear that the user should also add a\n * `ParallaxProvider`).\n */\nexport const deprecated_parallaxWrapperMeta: ComponentMeta<ParallaxWrapperProps> =\n  {\n    name: \"hostless-scroll-parallax\",\n    displayName: \"Scroll Parallax\",\n    importName: \"ParallaxWrapper\",\n    importPath: \"@plasmicpkgs/react-scroll-parallax\",\n    props: {\n      children: {\n        type: \"slot\",\n        defaultValue: {\n          type: \"img\",\n          src: \"https://placekitten.com/300/200\",\n          styles: {\n            maxWidth: \"100%\",\n          },\n        },\n      },\n      speed: {\n        type: \"number\",\n        description:\n          \"How much to speed up or slow down this element while scrolling. Try -20 for slower, 20 for faster.\",\n        defaultValue: 20,\n      },\n      disabled: {\n        type: \"boolean\",\n        description: \"Disables the parallax effect.\",\n      },\n      previewInEditor: {\n        type: \"boolean\",\n        description: \"Enable the parallax effect in the editor.\",\n      },\n    },\n    defaultStyles: {\n      maxWidth: \"100%\",\n    },\n  };\n\nexport function deprecated_registerParallaxWrapper(\n  loader?: { registerComponent: typeof registerComponent },\n  customParallaxWrapperMeta?: ComponentMeta<ParallaxWrapperProps>\n) {\n  if (loader) {\n    loader.registerComponent(\n      ParallaxWrapper,\n      customParallaxWrapperMeta ?? deprecated_parallaxWrapperMeta\n    );\n  } else {\n    registerComponent(\n      ParallaxWrapper,\n      customParallaxWrapperMeta ?? deprecated_parallaxWrapperMeta\n    );\n  }\n}\n\n/**\n * The new registration is only setting `isAttachment: true`.\n */\nexport const parallaxWrapperMeta: ComponentMeta<ParallaxWrapperProps> = {\n  ...deprecated_parallaxWrapperMeta,\n  isAttachment: true,\n};\n\nexport function registerParallaxWrapper(\n  loader?: { registerComponent: typeof registerComponent },\n  customParallaxWrapperMeta?: ComponentMeta<ParallaxWrapperProps>\n) {\n  if (loader) {\n    loader.registerComponent(\n      ParallaxWrapper,\n      customParallaxWrapperMeta ?? parallaxWrapperMeta\n    );\n  } else {\n    registerComponent(\n      ParallaxWrapper,\n      customParallaxWrapperMeta ?? parallaxWrapperMeta\n    );\n  }\n}\n","import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport registerGlobalContext, {\n  GlobalContextMeta,\n} from \"@plasmicapp/host/registerGlobalContext\";\nimport React, { useEffect, useRef } from \"react\";\nimport { ParallaxProvider, useController } from \"react-scroll-parallax\";\nimport { ParallaxProviderProps } from \"react-scroll-parallax/dist/components/ParallaxProvider/types\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * A safe wrapper around `useController()` to prevent errors when\n * `ParallaxProvider` is missing. If the context is unavailable,\n * `useController()` will throw an error, which we catch and handle\n * gracefully by returning `null` instead of crashing the component.\n */\nfunction useSafeController() {\n  try {\n    return useController();\n  } catch {\n    return null; // Return null instead of throwing an error\n  }\n}\n\n/**\n * This is required to ensure the parallax scrolling works correctly, since if\n * (for instance) images load after the parallax wrapper has calculated the\n * dimensions of the space, it will result in incorrect parallax scrolling\n * amounts.\n *\n * This is not great since we need to mutation-observe the whole section of the\n * document (which may be large), but we can probably optimize this in the\n * future.\n */\nfunction ParallaxCacheUpdate({ children }: React.PropsWithChildren<{}>) {\n  const parallaxController = useSafeController();\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (ref.current?.parentElement) {\n      const targetNode = ref.current.parentElement;\n      const observer = new ResizeObserver(() => {\n        if (parallaxController) {\n          parallaxController.update();\n        }\n      });\n      observer.observe(targetNode);\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return () => {};\n  }, [ref.current]);\n\n  return (\n    <div style={{ display: \"contents\" }} ref={ref}>\n      {children}\n    </div>\n  );\n}\n\nexport function ParallaxProviderWrapper({\n  children,\n  ...props\n}: React.PropsWithChildren<ParallaxProviderProps>) {\n  return (\n    <ParallaxProvider {...props}>\n      <ParallaxCacheUpdate>{children}</ParallaxCacheUpdate>\n    </ParallaxProvider>\n  );\n}\n\n/**\n * @deprecated use `globalParallaxProviderMeta` instead.\n */\nexport const parallaxProviderMeta: ComponentMeta<ParallaxProviderProps> = {\n  name: \"hostless-parallax-provider\",\n  displayName: \"Parallax Provider\",\n  importName: \"ParallaxProviderWrapper\",\n  importPath: \"@plasmicpkgs/react-scroll-parallax\",\n  props: {\n    children: {\n      type: \"slot\",\n      defaultValue: {\n        type: \"vbox\",\n        children: [\n          {\n            type: \"text\",\n            value:\n              \"Wrap any element in a Scroll Parallax component. Ensure they're all inside this Parallax Provider. Example:\",\n            styles: {\n              marginBottom: \"20px\",\n            },\n          },\n          {\n            type: \"component\",\n            name: \"hostless-scroll-parallax\",\n          },\n        ],\n      },\n    },\n    scrollAxis: {\n      type: \"choice\",\n      description: \"Scroll axis for setting horizontal/vertical scrolling\",\n      options: [\"vertical\", \"horizontal\"],\n      displayName: \"Scroll Axis\",\n    },\n  },\n};\n\n/**\n * @deprecated use `registerGlobalParallaxProvider` instead.\n */\nexport function registerParallaxProvider(\n  loader?: { registerComponent: typeof registerComponent },\n  customParallaxProviderMeta?: ComponentMeta<ParallaxProviderProps>\n) {\n  if (loader) {\n    loader.registerComponent(\n      ParallaxProviderWrapper,\n      customParallaxProviderMeta ?? parallaxProviderMeta\n    );\n  } else {\n    registerComponent(\n      ParallaxProviderWrapper,\n      customParallaxProviderMeta ?? parallaxProviderMeta\n    );\n  }\n}\n\nexport const globalParallaxProviderMeta: GlobalContextMeta<ParallaxProviderProps> =\n  {\n    name: \"global-parallax-provider\",\n    displayName: \"Parallax Provider\",\n    importName: \"ParallaxProviderWrapper\",\n    importPath: \"@plasmicpkgs/react-scroll-parallax\",\n    props: {\n      scrollAxis: {\n        type: \"choice\",\n        description: \"Scroll axis for setting horizontal/vertical scrolling\",\n        options: [\"vertical\", \"horizontal\"],\n        displayName: \"Scroll Axis\",\n      },\n    },\n  };\n\nexport function registerGlobalParallaxProvider(\n  loader?: { registerGlobalContext: typeof registerGlobalContext },\n  customParallaxProviderMeta?: GlobalContextMeta<ParallaxProviderProps>\n) {\n  if (loader) {\n    loader.registerGlobalContext(\n      ParallaxProviderWrapper,\n      customParallaxProviderMeta ?? globalParallaxProviderMeta\n    );\n  } else {\n    registerGlobalContext(\n      ParallaxProviderWrapper,\n      customParallaxProviderMeta ?? globalParallaxProviderMeta\n    );\n  }\n}\n"],"names":["ParallaxWrapper","_ref","speed","disabled","previewInEditor","children","className","inEditor","useContext","PlasmicCanvasContext","hasContext","ParallaxContext","isServer","window","Error","React","Parallax","deprecated_parallaxWrapperMeta","name","displayName","importName","importPath","props","type","defaultValue","src","styles","maxWidth","description","defaultStyles","parallaxWrapperMeta","_extends","isAttachment","ParallaxCacheUpdate","parallaxController","useController","_unused","useSafeController","ref","useRef","useEffect","_ref$current","current","parentElement","targetNode","observer","ResizeObserver","update","observe","disconnect","style","display","ParallaxProviderWrapper","_ref2","_objectWithoutPropertiesLoose","_excluded","ParallaxProvider","parallaxProviderMeta","value","marginBottom","scrollAxis","options","globalParallaxProviderMeta","loader","customParallaxWrapperMeta","registerComponent","customParallaxProviderMeta","registerGlobalContext"],"mappings":"4lBAewBA,EAAeC,OACrCC,EAAKD,EAALC,MACAC,EAAQF,EAARE,SACAC,EAAeH,EAAfG,gBACAC,EAAQJ,EAARI,SACAC,EAASL,EAATK,UAEMC,EAAWC,aAAWC,wBACtBC,EAA4C,MAA/BF,aAAWG,mBACxBC,EAA6B,oBAAXC,OACxB,IAAKH,IAAeE,EAClB,MAAM,IAAIE,MACR,mFAGJ,OACEC,gBAACC,YACCb,SAAUA,GAAaI,IAAaH,EACpCF,MAAOA,EACPI,UAAWA,GAEVD,OAYMY,EACX,CACEC,KAAM,2BACNC,YAAa,kBACbC,WAAY,kBACZC,WAAY,qCACZC,MAAO,CACLjB,SAAU,CACRkB,KAAM,OACNC,aAAc,CACZD,KAAM,MACNE,IAAK,kCACLC,OAAQ,CACNC,SAAU,UAIhBzB,MAAO,CACLqB,KAAM,SACNK,YACE,qGACFJ,aAAc,IAEhBrB,SAAU,CACRoB,KAAM,UACNK,YAAa,iCAEfxB,gBAAiB,CACfmB,KAAM,UACNK,YAAa,8CAGjBC,cAAe,CACbF,SAAU,SAwBHG,EAAmBC,KAC3Bd,GACHe,cAAc,mBCxEhB,SAASC,EAAmBhC,OAAGI,EAAQJ,EAARI,SACvB6B,EAnBR,WACE,IACE,OAAOC,kBACP,MAAAC,GACA,OAAO,MAekBC,GACrBC,EAAMC,SAA8B,MAkB1C,OAhBAC,aAAU,iBACR,UAAAC,EAAIH,EAAII,UAAJD,EAAaE,cAAe,CAC9B,IAAMC,EAAaN,EAAII,QAAQC,cACzBE,EAAW,IAAIC,GAAe,WAC9BZ,GACFA,EAAmBa,YAIvB,OADAF,EAASG,QAAQJ,GACV,WACLC,EAASI,cAGb,OAAO,eACN,CAACX,EAAII,UAGN3B,uBAAKmC,MAAO,CAAEC,QAAS,YAAcb,IAAKA,GACvCjC,YAKS+C,EAAuBC,OACrChD,EAAQgD,EAARhD,SACGiB,6IAAKgC,CAAAD,EAAAE,GAER,OACExC,gBAACyC,oCAAqBlC,GACpBP,gBAACkB,OAAqB5B,IAQ5B,IAAaoD,EAA6D,CACxEvC,KAAM,6BACNC,YAAa,oBACbC,WAAY,0BACZC,WAAY,qCACZC,MAAO,CACLjB,SAAU,CACRkB,KAAM,OACNC,aAAc,CACZD,KAAM,OACNlB,SAAU,CACR,CACEkB,KAAM,OACNmC,MACE,8GACFhC,OAAQ,CACNiC,aAAc,SAGlB,CACEpC,KAAM,YACNL,KAAM,+BAKd0C,WAAY,CACVrC,KAAM,SACNK,YAAa,wDACbiC,QAAS,CAAC,WAAY,cACtB1C,YAAa,iBAyBN2C,EACX,CACE5C,KAAM,2BACNC,YAAa,oBACbC,WAAY,0BACZC,WAAY,qCACZC,MAAO,CACLsC,WAAY,CACVrC,KAAM,SACNK,YAAa,wDACbiC,QAAS,CAAC,WAAY,cACtB1C,YAAa,0KDxDnB4C,EACAC,GAEID,EACFA,EAAOE,kBACLjE,QACAgE,EAAAA,EAA6B/C,GAG/BgD,EACEjE,QACAgE,EAAAA,EAA6B/C,sJCmDjC8C,EACAG,GAEIH,EACFA,EAAOI,sBACLf,QACAc,EAAAA,EAA8BJ,GAGhCK,EACEf,QACAc,EAAAA,EAA8BJ,8CA5ClCC,EACAG,GAEIH,EACFA,EAAOE,kBACLb,QACAc,EAAAA,EAA8BT,GAGhCQ,EACEb,QACAc,EAAAA,EAA8BT,6CDflCM,EACAC,GAEID,EACFA,EAAOE,kBACLjE,QACAgE,EAAAA,EAA6BlC,GAG/BmC,EACEjE,QACAgE,EAAAA,EAA6BlC"}