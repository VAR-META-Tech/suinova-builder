{"version":3,"file":"react-youtube.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport React from \"react\";\nimport YouTubeImpl, { YouTubeProps as YouTubeImplProps } from \"react-youtube\";\nimport type { Options } from \"youtube-player/dist/types\";\n\ntype PlayerVars = Exclude<Options[\"playerVars\"], undefined>;\nexport type YouTubeProps = YouTubeImplProps &\n  {\n    [prop in keyof PlayerVars]:\n      | PlayerVars[prop]\n      | (prop extends typeof booleanParams[number] ? boolean : never);\n  } & { mute?: boolean };\nconst playerParams = [\n  \"autoplay\",\n  \"cc_load_policy\",\n  \"color\",\n  \"controls\",\n  \"disablekb\",\n  \"enablejsapi\",\n  \"end\",\n  \"fs\",\n  \"hl\",\n  \"iv_load_policy\",\n  \"list\",\n  \"listType\",\n  \"loop\",\n  \"modestbranding\",\n  \"origin\",\n  \"playlist\",\n  \"playsinline\",\n  \"rel\",\n  \"start\",\n] as const;\n\nconst booleanParams = [\n  \"autoplay\",\n  \"cc_load_policy\",\n  \"controls\",\n  \"disablekb\",\n  \"fs\",\n  \"loop\",\n  \"modestbranding\",\n  \"playsinline\",\n  \"rel\",\n] as const;\n\nconst booleanParamsSet = new Set<string>(booleanParams);\n\nconst YouTube = React.forwardRef<YouTubeImpl, YouTubeProps>(\n  (props: YouTubeProps, ref) => {\n    const internalRef = React.useRef<YouTubeImpl | null>(null);\n\n    const onRef = React.useCallback(\n      (player: YouTubeImpl | null) => {\n        internalRef.current = player;\n        if (ref) {\n          if (typeof ref === \"function\") {\n            ref(player);\n          } else {\n            ref.current = player;\n          }\n        }\n      },\n      [ref]\n    );\n\n    React.useEffect(() => {\n      if (props.mute !== undefined) {\n        if (props.mute) {\n          internalRef.current?.getInternalPlayer()?.mute();\n        } else {\n          internalRef.current?.getInternalPlayer()?.unMute();\n        }\n      }\n    }, [props.mute, internalRef]);\n\n    const finalProps = { ...props };\n    for (const prop of playerParams) {\n      if (prop in finalProps) {\n        const value = finalProps[prop];\n        delete finalProps[prop];\n        if (!finalProps.opts) {\n          finalProps.opts = {};\n        }\n        if (!finalProps.opts.playerVars) {\n          finalProps.opts.playerVars = {};\n        }\n        if (booleanParamsSet.has(prop)) {\n          if (prop === \"cc_load_policy\" || prop === \"modestbranding\") {\n            // undefined or 1\n            if (value) {\n              finalProps.opts.playerVars[prop] = 1;\n            } else {\n              delete finalProps.opts.playerVars[prop];\n            }\n          } else {\n            // 0 or 1\n            finalProps.opts.playerVars[prop] = (value ? 1 : 0) as any;\n          }\n        } else {\n          finalProps.opts.playerVars[prop] = value as any;\n        }\n      }\n    }\n    return (\n      <YouTubeImpl\n        ref={onRef}\n        {...finalProps}\n        iframeClassName={props.className}\n      />\n    );\n  }\n);\n\nexport const youtubeMeta: ComponentMeta<YouTubeProps> = {\n  name: \"hostless-youtube\",\n  displayName: \"YouTube\",\n  importName: \"YouTube\",\n  importPath: \"@plasmicpkgs/react-youtube\",\n  props: {\n    videoId: {\n      type: \"string\",\n      defaultValue: \"R6MeLqRQzYw\",\n      displayName: \"Video ID\",\n      description: \"The ID for the YouTube video\",\n    },\n    autoplay: {\n      type: \"boolean\",\n      displayName: \"Auto Play\",\n      description:\n        \"Whether the video should automatically start playing when the player loads\",\n      defaultValueHint: false,\n      hidden: (props) => !props.mute,\n    },\n    cc_load_policy: {\n      type: \"boolean\",\n      displayName: \"Show Captions\",\n      description:\n        \"Whether the captions should be shown by default, even if the user has turned captions off\",\n      defaultValueHint: false,\n    },\n    start: {\n      type: \"number\",\n      displayName: \"Start\",\n      description:\n        \"The video should begin at this amount of seconds from the start of the video\",\n      defaultValueHint: 0,\n    },\n    end: {\n      type: \"number\",\n      displayName: \"End\",\n      description:\n        \"Stop playing the video after this amount of seconds (measured from the start of the video)\",\n    },\n    color: {\n      type: \"choice\",\n      displayName: \"Color\",\n      options: [\"red\", \"white\"],\n      description:\n        \"The color used in the display bar to highlight how much of the video the viewer has already seen\",\n      defaultValueHint: \"red\",\n    },\n    controls: {\n      type: \"boolean\",\n      displayName: \"Show Controls\",\n      description:\n        \"Whether the YouTube video player controls should be displayed\",\n      defaultValueHint: true,\n    },\n    disablekb: {\n      type: \"boolean\",\n      displayName: \"Disable Keyboard\",\n      description: \"Whether the keyboard controls should be disabled\",\n      defaultValueHint: false,\n    },\n    fs: {\n      type: \"boolean\",\n      displayName: \"FullScreen Button\",\n      description: \"Whether the fullscreen button should be displayed\",\n      defaultValueHint: true,\n    },\n    loop: {\n      type: \"boolean\",\n      displayName: \"Loop\",\n      description: \"Whether the video should be played again after it finishes\",\n      defaultValueHint: false,\n    },\n    modestbranding: {\n      type: \"boolean\",\n      displayName: \"Hide Logo\",\n      description: \"Hide the YouTube logo in the control bar\",\n      defaultValueHint: false,\n    },\n    mute: {\n      type: \"boolean\",\n      displayName: \"Mute\",\n      description: \"Whether the video should be muted\",\n      defaultValueHint: false,\n    },\n    playsinline: {\n      type: \"boolean\",\n      displayName: \"Play Inline\",\n      description:\n        \"Whether the video should be played inline or fullscreen on iOS\",\n      defaultValueHint: false,\n    },\n    rel: {\n      type: \"boolean\",\n      displayName: \"Related Videos\",\n      description:\n        \"Whether it should show related videos when the video ends (if false, it shows other videos from the same channel)\",\n      defaultValueHint: true,\n    },\n  },\n  isDefaultExport: true,\n  defaultStyles: {\n    height: \"390px\",\n    width: \"640px\",\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n};\n\nexport function registerYouTube(\n  loader?: { registerComponent: typeof registerComponent },\n  customYouTubeMeta?: ComponentMeta<YouTubeProps>\n) {\n  if (loader) {\n    loader.registerComponent(YouTube, customYouTubeMeta ?? youtubeMeta);\n  } else {\n    registerComponent(YouTube, customYouTubeMeta ?? youtubeMeta);\n  }\n}\n\nexport default YouTube;\n"],"names":["playerParams","booleanParamsSet","Set","YouTube","React","forwardRef","props","ref","internalRef","useRef","onRef","useCallback","player","current","useEffect","_internalRef$current","_internalRef$current2","undefined","mute","getInternalPlayer","unMute","finalProps","_extends","_i","_playerParams","length","prop","value","opts","playerVars","has","YouTubeImpl","iframeClassName","className","youtubeMeta","name","displayName","importName","importPath","videoId","type","defaultValue","description","autoplay","defaultValueHint","hidden","cc_load_policy","start","end","color","options","controls","disablekb","fs","loop","modestbranding","playsinline","rel","isDefaultExport","defaultStyles","height","width","maxHeight","maxWidth","loader","customYouTubeMeta","registerComponent"],"mappings":"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"}