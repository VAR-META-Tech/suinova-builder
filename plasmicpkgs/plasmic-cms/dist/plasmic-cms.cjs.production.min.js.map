{"version":3,"file":"plasmic-cms.cjs.production.min.js","sources":["../src/api.ts","../src/context.tsx","../src/util.ts","../src/components.tsx","../src/index.tsx"],"sourcesContent":["import { ApiCmsQuery, ApiCmsRow, ApiCmsTable } from \"./schema\";\n\nexport interface DatabaseConfig {\n  host: string;\n  databaseId: string;\n  databaseToken: string;\n  locale: string;\n  useDraft: boolean | string[];\n}\n\nexport interface QueryParams {\n  useDraft?: boolean;\n  where?: any;\n  orderBy?: string;\n  desc?: boolean;\n  limit?: number;\n  offset?: number;\n  fields?: string[];\n}\n\nfunction queryParamsToApi(params: QueryParams): ApiCmsQuery {\n  return {\n    where: params.where,\n    limit: params.limit,\n    offset: params.offset,\n    order: params.orderBy\n      ? [\n          {\n            field: params.orderBy,\n            dir: params.desc ? \"desc\" : \"asc\",\n          },\n        ]\n      : undefined,\n    fields: params.fields,\n  };\n}\n\nexport class HttpError extends Error {\n  constructor(public status: number, message: string) {\n    super(message);\n  }\n}\n\nexport class API {\n  constructor(private config: DatabaseConfig) {}\n\n  async get(endpoint: string, params: any = {}) {\n    const url = new URL(\n      `${this.config.host}/api/v1/cms/databases/${this.config.databaseId}${endpoint}`\n    );\n    const fixedParams = Object.keys(params).reduce((newObj, key) => {\n      const value = params[key];\n      if (value != null) {\n        newObj[key] = value;\n      }\n      return newObj;\n    }, {} as any);\n    url.search = new URLSearchParams(fixedParams).toString();\n    const response = await fetch(url.toString(), {\n      method: \"GET\",\n      headers: {\n        accept: \"*/*\",\n        \"x-plasmic-api-cms-tokens\": `${this.config.databaseId}:${this.config.databaseToken}`,\n      },\n      mode: \"cors\",\n    });\n\n    if (response.status !== 200) {\n      let message = await response.text();\n      try {\n        const json = JSON.parse(message);\n        if (json.error?.message) {\n          message = json.error.message;\n        }\n      } catch {\n        // ignored\n      }\n      throw new HttpError(response.status, message);\n    }\n\n    return await response.json();\n  }\n\n  async fetchTables(): Promise<ApiCmsTable[]> {\n    try {\n      const response = await this.get(``);\n      return response.tables;\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  }\n\n  private useDraftForTable(table: string) {\n    if (Array.isArray(this.config.useDraft)) {\n      return this.config.useDraft.includes(table);\n    } else {\n      return this.config.useDraft;\n    }\n  }\n\n  async query(table: string, params: QueryParams = {}): Promise<ApiCmsRow[]> {\n    try {\n      const response = await this.get(`/tables/${table}/query`, {\n        q: JSON.stringify(queryParamsToApi(params)),\n        draft: Number(this.useDraftForTable(table) || params.useDraft),\n        locale: this.config.locale,\n      });\n      return response.rows;\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  }\n\n  async count(\n    table: string,\n    params: Pick<QueryParams, \"where\" | \"useDraft\"> = {}\n  ): Promise<number> {\n    try {\n      const response = await this.get(`/tables/${table}/count`, {\n        q: JSON.stringify(queryParamsToApi(params)),\n        draft: Number(this.useDraftForTable(table) || params.useDraft),\n      });\n      return response.count;\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  }\n}\n\nexport function mkApi(config: DatabaseConfig | undefined) {\n  if (!config) {\n    throw new Error(\"Component must be wrapped in 'CMS Data Provider'.\");\n  }\n\n  return new API(config);\n}\n","import {\n  DataDict,\n  DataProvider,\n  useDataEnv,\n  useSelector,\n} from \"@plasmicapp/host\";\nimport React from \"react\";\nimport { DatabaseConfig } from \"./api\";\nimport { ApiCmsRow, ApiCmsTable } from \"./schema\";\n\nconst contextPrefix = \"plasmicCms\";\nconst databaseContextKey = `${contextPrefix}Database`;\nconst tablesContextKey = `${contextPrefix}Tables`;\nconst tableSchemaContextKey = `${contextPrefix}TableSchema`;\nconst collectionResultSuffix = `Collection`;\nexport const mkQueryContextKey = (table: string) =>\n  `${contextPrefix}${capitalizeFirst(table)}${collectionResultSuffix}`;\nconst itemContextSuffix = `Item`;\nconst countContextSuffix = `Count`;\nconst modeContextSuffix = `Mode`;\nconst mkRowContextKey = (table: string) =>\n  `${contextPrefix}${capitalizeFirst(table)}${itemContextSuffix}`;\nconst mkCountContextKey = (table: string) =>\n  `${contextPrefix}${capitalizeFirst(table)}${countContextSuffix}`;\nconst mkModeContextKey = (table: string) =>\n  `${contextPrefix}${capitalizeFirst(table)}${modeContextSuffix}`;\n\nfunction capitalizeFirst(str: string): string {\n  return str[0]?.toUpperCase() + str.slice(1);\n}\n\nexport function useDatabase() {\n  return useSelector(databaseContextKey) as DatabaseConfig | undefined;\n}\n\nexport function makeDatabaseCacheKey(config: DatabaseConfig | undefined) {\n  if (!config) {\n    return null;\n  }\n  const { databaseToken, ...rest } = config;\n  return JSON.stringify(rest);\n}\n\nexport function DatabaseProvider({\n  config,\n  children,\n}: {\n  config: DatabaseConfig;\n  children?: React.ReactNode;\n}) {\n  return (\n    <DataProvider name={databaseContextKey} data={config} hidden={true}>\n      {children}\n    </DataProvider>\n  );\n}\n\nexport function useTables() {\n  return useSelector(tablesContextKey) as ApiCmsTable[] | undefined;\n}\n\nexport function TablesProvider({\n  children,\n  tables,\n}: {\n  children?: React.ReactNode;\n  tables?: ApiCmsTable[];\n}) {\n  return (\n    <DataProvider name={tablesContextKey} data={tables} hidden={true}>\n      {children}\n    </DataProvider>\n  );\n}\n\nexport function TableSchemaProvider({\n  children,\n  table,\n}: {\n  children?: React.ReactNode;\n  table?: string | undefined;\n}) {\n  const tables = useTables();\n\n  let schema;\n  if (tables && tables?.length > 0) {\n    if (!table) {\n      schema = tables[0]?.schema;\n    } else {\n      schema = tables?.find((t) => t?.identifier === table)?.schema;\n    }\n  }\n  return (\n    <DataProvider name={tableSchemaContextKey} data={schema}>\n      {children}\n    </DataProvider>\n  );\n}\n\nexport function useQueryResults(table?: string) {\n  const env = useDataEnv();\n  const tables = useTables();\n\n  if (!env) {\n    return undefined;\n  }\n\n  if (table) {\n    return {\n      table,\n      rows: (env[mkQueryContextKey(table)] ?? []) as ApiCmsRow[],\n    };\n  }\n  if (!tables) {\n    return undefined;\n  }\n\n  const matchingKeys = getClosestMatchingKeys(env, collectionResultSuffix);\n  for (const key of matchingKeys) {\n    const inferredTable = tables.find(\n      (t) => mkQueryContextKey(t.identifier) === key\n    );\n    if (inferredTable) {\n      return {\n        table: inferredTable.identifier,\n        rows: (env[key] ?? []) as ApiCmsRow[],\n      };\n    }\n  }\n  return undefined;\n}\n\nfunction getClosestMatchingKeys(env: DataDict, suffix: string) {\n  return [...Object.keys(env).reverse()].filter((k) => k.endsWith(suffix));\n}\n\nfunction getClosestMatchingKeysBy(\n  env: DataDict,\n  pred: (str: string) => boolean\n) {\n  return [...Object.keys(env).reverse()].filter((key) => pred(key));\n}\n\nexport function QueryResultProvider({\n  children,\n  table,\n  rows,\n  hidden,\n}: {\n  children?: React.ReactNode;\n  table: string | undefined;\n  rows: ApiCmsRow[] | undefined;\n  hidden?: boolean;\n}) {\n  return (\n    <DataProvider\n      name={table ? mkModeContextKey(table) : undefined}\n      data=\"rows\"\n      hidden\n    >\n      <DataProvider\n        name={table ? mkQueryContextKey(table) : undefined}\n        data={rows}\n        hidden={hidden}\n      >\n        {children}\n      </DataProvider>\n    </DataProvider>\n  );\n}\n\nexport function useTablesWithDataLoaded(mode: \"rows\" | \"count\" | undefined) {\n  const env = useDataEnv();\n  const tables = useTables();\n\n  if (!env) {\n    return undefined;\n  }\n\n  if (!tables) {\n    return undefined;\n  }\n\n  const matchingKeys = getClosestMatchingKeysBy(env, (key) => {\n    if (mode === \"rows\") {\n      return key.endsWith(itemContextSuffix);\n    } else if (mode === \"count\") {\n      return key.endsWith(countContextSuffix);\n    } else {\n      return (\n        key.endsWith(itemContextSuffix) || key.endsWith(countContextSuffix)\n      );\n    }\n  });\n\n  return tables.filter((table) =>\n    matchingKeys.some((key) => {\n      if (mode === \"rows\") {\n        return mkRowContextKey(table.identifier) === key;\n      } else if (mode === \"count\") {\n        return mkCountContextKey(table.identifier) === key;\n      } else {\n        return (\n          mkRowContextKey(table.identifier) === key ||\n          mkCountContextKey(table.identifier) === key\n        );\n      }\n    })\n  );\n}\n\nfunction deriveTableId(tables?: ApiCmsTable[], table?: string) {\n  if (!table && tables && tables.length > 0) {\n    table = tables[0].identifier;\n  }\n  return table;\n}\n\nexport function useRow(tables?: ApiCmsTable[], table?: string) {\n  const env = useDataEnv();\n\n  if (!env) {\n    return undefined;\n  }\n\n  table = deriveTableId(tables, table);\n\n  if (table) {\n    return {\n      table,\n      row: env[mkRowContextKey(table)] as ApiCmsRow | undefined,\n    };\n  }\n\n  return undefined;\n}\n\nexport function useCount(tables?: ApiCmsTable[], table?: string) {\n  const env = useDataEnv();\n\n  if (!env) {\n    return undefined;\n  }\n\n  table = deriveTableId(tables, table);\n\n  if (table) {\n    return {\n      table,\n      count: env[mkCountContextKey(table)] as number | undefined,\n    };\n  }\n\n  return undefined;\n}\n\nexport function RowProvider({\n  children,\n  table,\n  row,\n}: {\n  children?: React.ReactNode;\n  table: string;\n  row: ApiCmsRow;\n}) {\n  return (\n    <DataProvider name={mkRowContextKey(table)} data={row}>\n      {children}\n    </DataProvider>\n  );\n}\n\nexport function CountProvider({\n  children,\n  table,\n  count,\n}: {\n  children?: React.ReactNode;\n  table: string | undefined;\n  count: number | undefined;\n}) {\n  return (\n    <DataProvider\n      name={table ? mkModeContextKey(table) : undefined}\n      data=\"count\"\n      hidden\n    >\n      <DataProvider\n        name={table ? mkCountContextKey(table) : undefined}\n        data={count}\n      >\n        {children}\n      </DataProvider>\n    </DataProvider>\n  );\n}\n","import { ApiCmsTable, CmsType } from \"./schema\";\n\ntype ValueLabelPair = {\n  value: string;\n  label: string;\n};\n\nexport function mkTableOptions(\n  tables: ApiCmsTable[] | undefined\n): ValueLabelPair[] {\n  if (!tables) {\n    return [];\n  }\n\n  return tables.map((table) => ({\n    value: table.identifier,\n    label: table.name,\n  }));\n}\n\nexport function mkFieldOptions(\n  tables: ApiCmsTable[] | undefined,\n  tableIdentifier: string | undefined,\n  types?: CmsType[]\n): ValueLabelPair[] {\n  if (!tables) {\n    return [];\n  }\n\n  const table = tables.find((t) => t.identifier === tableIdentifier);\n  if (!table) {\n    return [];\n  }\n\n  let fields = table.schema.fields;\n  if (types) {\n    fields = fields.filter((f) => types.includes(f.type));\n  }\n  const options = fields.map((f) => ({\n    value: f.identifier,\n    label: f.name || f.identifier,\n  }));\n  if (!options.some((option) => option.value === \"_id\")) {\n    options.push({\n      label: \"System-assigned ID\",\n      value: \"_id\",\n    });\n  }\n\n  return options;\n}\n","import { repeatedElement, usePlasmicCanvasContext } from \"@plasmicapp/host\";\nimport {\n  CanvasComponentProps,\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport { GlobalContextMeta } from \"@plasmicapp/host/registerGlobalContext\";\nimport { usePlasmicQueryData } from \"@plasmicapp/query\";\nimport dayjs from \"dayjs\";\nimport React from \"react\";\nimport { DatabaseConfig, HttpError, mkApi, QueryParams } from \"./api\";\nimport {\n  CountProvider,\n  DatabaseProvider,\n  makeDatabaseCacheKey,\n  QueryResultProvider,\n  RowProvider,\n  TablesProvider,\n  useCount,\n  useDatabase,\n  useRow,\n  useTables,\n  useTablesWithDataLoaded,\n  TableSchemaProvider,\n} from \"./context\";\nimport {\n  ApiCmsRow,\n  ApiCmsTable,\n  CmsFieldMeta,\n  CmsType,\n  CmsMetaType,\n} from \"./schema\";\nimport { mkFieldOptions, mkTableOptions } from \"./util\";\n\nconst modulePath = \"@plasmicpkgs/plasmic-cms\";\nconst componentPrefix = \"hostless-plasmic-cms\";\n\ninterface FetcherComponentProps {\n  hideIfNotFound?: boolean;\n}\n\nfunction renderMaybeData<T>(\n  maybeData: ReturnType<typeof usePlasmicQueryData>,\n  renderFn: (data: T) => JSX.Element | any,\n  loaderProps: FetcherComponentProps,\n  inEditor: boolean,\n  loadingMessage?: React.ReactNode,\n  forceLoadingState?: boolean\n): React.ReactElement | null {\n  if (\"error\" in maybeData) {\n    const error = maybeData.error;\n    if (!inEditor) {\n      return <>{loadingMessage ?? <div>Loading...</div>}</>;\n    }\n    if (error && error instanceof HttpError && error.status === 404) {\n      if (loaderProps.hideIfNotFound) {\n        return null;\n      } else {\n        return <div>Error: Data not found</div>;\n      }\n    } else {\n      return <div>Error: {error?.message}</div>;\n    }\n  }\n  if (!(\"data\" in maybeData) || forceLoadingState) {\n    return <>{loadingMessage ?? <div>Loading...</div>}</>;\n  }\n  return renderFn(maybeData.data as T);\n}\n\ninterface CmsCredentialsProviderProps extends DatabaseConfig {\n  children?: React.ReactNode;\n}\n\nconst defaultHost = \"https://data.plasmic.app\";\n\nexport const cmsCredentialsProviderMeta: GlobalContextMeta<CmsCredentialsProviderProps> =\n  {\n    name: `${componentPrefix}-credentials-provider`,\n    displayName: \"CMS Credentials Provider\",\n    description: `\nFind (or create) your CMS in the [dashboard](https://studio.plasmic.app), and go to its Settings view for the ID and token.\n\n[See tutorial video](https://docs.plasmic.app/learn/plasmic-cms/).`,\n    importName: \"CmsCredentialsProvider\",\n    importPath: modulePath,\n    providesData: true,\n    props: {\n      host: {\n        type: \"string\",\n        displayName: \"Studio URL\",\n        description: `The default host for use in production is ${defaultHost}.`,\n        defaultValue: defaultHost,\n        defaultValueHint: defaultHost,\n        advanced: true,\n      },\n      databaseId: {\n        type: \"string\",\n        displayName: \"CMS ID\",\n        description:\n          \"The ID of the CMS (database) to use. (Can get on the CMS settings page)\",\n      },\n      databaseToken: {\n        type: \"string\",\n        displayName: \"CMS Public Token\",\n        description:\n          \"The Public Token of the CMS (database) you are using. (Can get on the CMS settings page)\",\n      },\n      locale: {\n        type: \"string\",\n        displayName: \"Locale\",\n        description:\n          \"The locale to use for localized values, leave empty for the default locale.\",\n      },\n    },\n  };\n\nexport function CmsCredentialsProvider({\n  children,\n  databaseId,\n  databaseToken,\n  host,\n  locale,\n  useDraft,\n}: CmsCredentialsProviderProps) {\n  const config: DatabaseConfig = {\n    databaseId,\n    databaseToken,\n    locale,\n    host: host || defaultHost,\n    useDraft: useDraft ?? false,\n  };\n  return (\n    <DatabaseProvider config={config}>\n      <TablesFetcher>{children}</TablesFetcher>\n    </DatabaseProvider>\n  );\n}\n\nfunction TablesFetcher({ children }: { children: React.ReactNode }) {\n  const databaseConfig = useDatabase();\n\n  const cacheKey = JSON.stringify({\n    component: \"TablesFetcher\",\n    databaseConfig: makeDatabaseCacheKey(databaseConfig),\n  });\n  const maybeData = usePlasmicQueryData(cacheKey, async () => {\n    if (!isDatabaseConfigured(databaseConfig)) {\n      return [];\n    }\n    return await mkApi(databaseConfig).fetchTables();\n  });\n  const inEditor = !!usePlasmicCanvasContext();\n\n  return (\n    <TablesProvider tables={maybeData.data}>\n      {inEditor && maybeData.error ? (\n        <div>CMS Error: {maybeData.error.message}</div>\n      ) : (\n        children\n      )}\n    </TablesProvider>\n  );\n}\n\ntype TablesContextData = {\n  tables?: ApiCmsTable[];\n};\ninterface TableContextData extends TablesContextData {\n  table?: string;\n}\n\ninterface RowContextData extends TableContextData {\n  row?: ApiCmsRow;\n  fieldMeta?: CmsFieldMeta;\n}\n\nfunction isDatabaseConfigured(config?: DatabaseConfig) {\n  return config?.databaseId && config?.databaseToken;\n}\n\ninterface CmsQueryRepeaterProps\n  extends QueryParams,\n    CanvasComponentProps<TableContextData> {\n  children: React.ReactNode;\n  table: string;\n  emptyMessage?: React.ReactNode;\n  forceEmptyState?: boolean;\n  loadingMessage?: React.ReactNode;\n  forceLoadingState?: boolean;\n  noLayout?: boolean;\n  noAutoRepeat?: boolean;\n  className?: string;\n  filterField?: string;\n  filterValue?: string;\n  fields?: string[];\n  mode?: \"rows\" | \"count\";\n}\n\nexport const cmsQueryRepeaterMeta: ComponentMeta<CmsQueryRepeaterProps> = {\n  name: `${componentPrefix}-query-repeater`,\n  displayName: \"CMS Data Fetcher\",\n  description:\n    \"Fetches CMS data. Repeats `children` slot content for each row fetched. [See tutorial video](https://docs.plasmic.app/learn/plasmic-cms/).\",\n  importName: \"CmsQueryRepeater\",\n  importPath: modulePath,\n  providesData: true,\n  defaultStyles: {\n    display: \"flex\",\n    width: \"stretch\",\n    maxWidth: \"100%\",\n    flexDirection: \"column\",\n  },\n  props: {\n    children: {\n      type: \"slot\",\n      isRepeated: true,\n      defaultValue: {\n        type: \"vbox\",\n        children: [\n          {\n            type: \"component\",\n            name: `${componentPrefix}-row-field`,\n          },\n        ],\n      },\n    },\n    table: {\n      type: \"choice\",\n      displayName: \"Model\",\n      description: \"CMS model (table) to query.\",\n      options: (_, ctx) => mkTableOptions(ctx?.tables),\n      defaultValueHint: (_, ctx) => ctx?.table,\n    },\n    useDraft: {\n      type: \"boolean\",\n      displayName: \"Use drafts?\",\n      description: \"If set, also query unpublished content.\",\n      defaultValue: false,\n      hidden: () => true,\n    },\n    mode: {\n      type: \"choice\",\n      options: [\n        { label: \"Rows\", value: \"rows\" },\n        { label: \"Count\", value: \"count\" },\n      ],\n      defaultValueHint: \"rows\",\n    },\n    where: {\n      type: \"object\",\n      displayName: \"Filter\",\n      description:\n        \"Filter clause, as a JSON in Mongo query format. Should not be used together with Filter field and Filter value\",\n      advanced: true,\n    },\n    filterField: {\n      type: \"choice\",\n      displayName: \"Filter field\",\n      description: \"Field (from model schema) to filter by\",\n      options: ({ table }, ctx) =>\n        mkFieldOptions(ctx?.tables, ctx?.table ?? table, [\n          CmsMetaType.NUMBER,\n          CmsMetaType.BOOLEAN,\n          CmsMetaType.TEXT,\n          CmsMetaType.LONG_TEXT,\n          CmsMetaType.REF,\n        ]),\n    },\n    filterValue: {\n      type: \"string\",\n      displayName: \"Filter value\",\n      description: \"Value to filter by, should be of filter field type\",\n    },\n    orderBy: {\n      type: \"choice\",\n      displayName: \"Order by\",\n      description: \"Field to order by.\",\n      options: (_, ctx) =>\n        mkFieldOptions(ctx?.tables, ctx?.table, [\n          CmsMetaType.NUMBER,\n          CmsMetaType.BOOLEAN,\n          CmsMetaType.DATE_TIME,\n          CmsMetaType.LONG_TEXT,\n          CmsMetaType.TEXT,\n        ]),\n      hidden: (ps) => ps.mode === \"count\",\n    },\n    desc: {\n      type: \"boolean\",\n      displayName: \"Sort descending?\",\n      description: 'Sort descending by \"Order by\" field.',\n      defaultValue: false,\n      hidden: (ps) => ps.mode === \"count\",\n    },\n    limit: {\n      type: \"number\",\n      displayName: \"Limit\",\n      description: \"Maximum number of entries to fetch (0 for unlimited).\",\n      defaultValue: 0,\n      hidden: (ps) => ps.mode === \"count\",\n    },\n    offset: {\n      type: \"number\",\n      displayName: \"Offset\",\n      description:\n        \"Skips this number of rows in the result set; used in combination with limit to build pagination\",\n      hidden: (ps) => ps.mode === \"count\",\n    },\n    fields: {\n      type: \"choice\",\n      multiSelect: true,\n      displayName: \"Fields\",\n      description:\n        \"Fields from the CMS model to include with each row; by default, all fields are included\",\n      options: ({ table }, ctx) =>\n        mkFieldOptions(ctx?.tables, ctx?.table ?? table),\n      hidden: (ps) => ps.mode === \"count\",\n    },\n    emptyMessage: {\n      type: \"slot\",\n      defaultValue: {\n        type: \"text\",\n        value: \"No matching published entries found.\",\n      },\n    },\n    forceEmptyState: {\n      type: \"boolean\",\n      displayName: \"Force empty state\",\n      description: \"If set, will render as if no matching entries were found.\",\n      defaultValue: false,\n    },\n    loadingMessage: {\n      type: \"slot\",\n      defaultValue: {\n        type: \"text\",\n        value: \"Loading...\",\n      },\n    },\n    forceLoadingState: {\n      type: \"boolean\",\n      displayName: \"Force loading state\",\n      description:\n        \"If set, will render as if it is waiting for the query to run.\",\n      defaultValue: false,\n    },\n    noLayout: {\n      type: \"boolean\",\n      displayName: \"No layout\",\n      description:\n        \"When set, CMS Data Loader will not layout its children; instead, the layout set on its parent element will be used. Useful if you want to set flex gap or control container tag type.\",\n      defaultValue: false,\n    },\n    noAutoRepeat: {\n      type: \"boolean\",\n      displayName: \"No auto-repeat\",\n      description: \"Do not automatically repeat children for every entry.\",\n      defaultValue: false,\n      hidden: (ps) => ps.mode === \"count\",\n    },\n  },\n};\n\nexport function CmsQueryRepeater({\n  table,\n  children,\n  setControlContextData,\n  mode,\n  where,\n  useDraft,\n  orderBy,\n  desc,\n  limit,\n  offset,\n  emptyMessage,\n  forceEmptyState,\n  loadingMessage,\n  forceLoadingState,\n  noLayout,\n  noAutoRepeat,\n  className,\n  filterField,\n  filterValue,\n  fields,\n}: CmsQueryRepeaterProps) {\n  const databaseConfig = useDatabase();\n  const tables = useTables();\n\n  if (filterField && filterValue) {\n    where = {\n      [filterField]: filterValue,\n    };\n  }\n  const params = { where, useDraft, orderBy, desc, limit, offset, fields };\n\n  if (!table && tables && tables.length > 0) {\n    table = tables[0].identifier;\n  }\n\n  const cacheKey = JSON.stringify({\n    component: \"CmsQueryLoader\",\n    mode,\n    table,\n    databaseConfig: makeDatabaseCacheKey(databaseConfig),\n    params,\n  });\n\n  if (tables) {\n    // TODO: Only include table if __plasmic_cms_row_{table} exists.\n    setControlContextData?.({ tables, table });\n  }\n\n  const maybeData = usePlasmicQueryData(cacheKey, async () => {\n    if (!isDatabaseConfigured(databaseConfig)) {\n      throw new Error(`You must specify a CMS ID and API key`);\n    }\n    if (!table) {\n      throw new Error(`You must select a model to query`);\n    } else if (tables && !tables.find((t) => t.identifier === table)) {\n      throw new Error(`There is no model called \"${table}\"`);\n    } else if (mode === \"count\") {\n      return mkApi(databaseConfig).count(table, params);\n    } else {\n      return mkApi(databaseConfig).query(table, params);\n    }\n  });\n  const inEditor = !!usePlasmicCanvasContext();\n  if (mode === \"count\") {\n    const node = renderMaybeData<number>(\n      maybeData,\n      () => children,\n      { hideIfNotFound: false },\n      inEditor,\n      loadingMessage,\n      forceLoadingState\n    );\n    return (\n      <TableSchemaProvider table={table}>\n        <CountProvider\n          table={table}\n          count={\n            typeof maybeData?.data === \"number\" ? maybeData.data : undefined\n          }\n        >\n          {node}\n        </CountProvider>\n      </TableSchemaProvider>\n    );\n  } else {\n    const node = renderMaybeData<ApiCmsRow[]>(\n      maybeData,\n      (rows) => {\n        if (rows.length === 0 || forceEmptyState) {\n          return emptyMessage;\n        }\n\n        return noAutoRepeat\n          ? children\n          : rows.map((row, index) => (\n              <RowProvider key={index} table={table!} row={row}>\n                {repeatedElement(index, children)}\n              </RowProvider>\n            ));\n      },\n      { hideIfNotFound: false },\n      inEditor,\n      loadingMessage,\n      forceLoadingState\n    );\n    return (\n      <TableSchemaProvider table={table}>\n        <QueryResultProvider\n          rows={Array.isArray(maybeData?.data) ? maybeData.data : undefined}\n          table={table}\n        >\n          {noLayout ? <> {node} </> : <div className={className}> {node} </div>}\n        </QueryResultProvider>\n      </TableSchemaProvider>\n    );\n  }\n}\n\ninterface CmsRowFieldProps extends CanvasComponentProps<RowContextData> {\n  table: string;\n  field: string;\n  className?: string;\n  dateFormat?: string;\n  usePlasmicTheme?: boolean;\n  themeResetClassName?: string;\n}\n\nexport const cmsRowFieldMeta: ComponentMeta<CmsRowFieldProps> = {\n  name: `${componentPrefix}-row-field`,\n  displayName: \"CMS Entry Field\",\n  importName: \"CmsRowField\",\n  importPath: modulePath,\n  props: {\n    table: {\n      type: \"choice\",\n      displayName: \"Model\",\n      hidden: (props, ctx: TableContextData | null) =>\n        (ctx?.tables?.length ?? 0) <= 1 && !props.table,\n      helpText: \"Pick model from a CMS Data Fetcher\",\n      description:\n        \"Usually not used! Only with multiple CMS Data Loaders, use this to choose which to show. Otherwise, go select the CMS Data Loader if you want to load different data.\",\n      options: (_, ctx) => mkTableOptions(ctx?.tables),\n      defaultValueHint: (_, ctx) => ctx?.table,\n    },\n    field: {\n      type: \"choice\",\n      displayName: \"Field\",\n      description: \"Field (from model schema) to use.\",\n      options: ({ table }, ctx) =>\n        mkFieldOptions(ctx?.tables, ctx?.table ?? table, [\n          CmsMetaType.NUMBER,\n          CmsMetaType.BOOLEAN,\n          CmsMetaType.TEXT,\n          CmsMetaType.LONG_TEXT,\n          CmsMetaType.DATE_TIME,\n          CmsMetaType.RICH_TEXT,\n          CmsMetaType.IMAGE,\n          CmsMetaType.FILE,\n          CmsMetaType.ENUM,\n        ]),\n      defaultValueHint: (_, ctx) =>\n        ctx?.fieldMeta?.name || ctx?.fieldMeta?.identifier,\n    },\n    dateFormat: {\n      type: \"choice\",\n      displayName: \"Date Format\",\n      hidden: ({ field }, ctx) => {\n        if (!ctx) {\n          return true;\n        }\n        const { table: tableIdentifier, tables } = ctx;\n        const table = tables?.find((t) => t.identifier === tableIdentifier);\n        if (!table) {\n          return true;\n        }\n        const fieldMeta = table.schema.fields.find(\n          (f) => f.identifier === field\n        );\n        if (!fieldMeta) {\n          return true;\n        }\n        return fieldMeta.type !== CmsMetaType.DATE_TIME;\n      },\n      options: [\n        {\n          label: \"July 26, 2014\",\n          value: \"MMMM D, YYYY\",\n        },\n        {\n          label: \"July 26, 2014 10:02 PM\",\n          value: \"MMMM D, YYYY h:mm A\",\n        },\n        {\n          label: \"Jul 26, 2014\",\n          value: \"MMM D, YYYY\",\n        },\n        {\n          label: \"Jul 26, 2014 10:02 PM\",\n          value: \"MMM D, YYYY h:mm A\",\n        },\n        {\n          label: \"Saturday, July 26, 2014\",\n          value: \"dddd, MMMM D, YYYY\",\n        },\n        {\n          label: \"7/26/2014\",\n          value: \"M/D/YYYY\",\n        },\n        {\n          label: \"7/26/2014 10:02 PM\",\n          value: \"M/D/YYYY h:mm A\",\n        },\n        {\n          label: \"26/7/2014\",\n          value: \"D/M/YYYY\",\n        },\n        {\n          label: \"26/7/2014 10:02 PM\",\n          value: \"D/M/YYYY h:mm A\",\n        },\n        {\n          label: \"7/26/14\",\n          value: \"M/D/YY\",\n        },\n        {\n          label: \"7/26/14 10:02 PM\",\n          value: \"M/D/YY h:mm A\",\n        },\n        {\n          label: \"26/7/14\",\n          value: \"D/M/YY\",\n        },\n        {\n          label: \"26/7/14 10:02 PM\",\n          value: \"D/M/YY h:mm A\",\n        },\n      ],\n    },\n    usePlasmicTheme: {\n      type: \"boolean\",\n      displayName: \"Use Plasmic tag styles?\",\n      description: \"For HTML content, use tag styles defined in Plasmic\",\n      advanced: true,\n    },\n    themeResetClassName: {\n      type: \"themeResetClass\",\n      targetAllTags: true,\n    },\n  },\n  defaultStyles: {\n    objectFit: \"cover\",\n  },\n};\n\nexport function CmsRowField({\n  className,\n  table,\n  field,\n  dateFormat,\n  setControlContextData,\n  usePlasmicTheme,\n  themeResetClassName,\n  ...rest\n}: CmsRowFieldProps) {\n  const tables = useTablesWithDataLoaded(\"rows\");\n\n  const res = useRow(tables, table);\n  const unknown = (\n    <div className={className} {...rest}>\n      Field {table ?? \"Unknown Model\"}.{field ?? \"Unknown Field\"}\n    </div>\n  );\n  const fieldMeta = res\n    ? deriveInferredTableField({\n        table: res.table,\n        tables,\n        field,\n        typeFilters: [\n          CmsMetaType.TEXT,\n          CmsMetaType.LONG_TEXT,\n          CmsMetaType.RICH_TEXT,\n        ],\n      })\n    : undefined;\n\n  if (tables) {\n    // TODO: Only include table if __plasmic_cms_row_{table} exists.\n    setControlContextData?.({\n      tables,\n      ...(res && res.row\n        ? { table: res.table, row: res.row, fieldMeta: fieldMeta }\n        : {}),\n    });\n  }\n\n  if (!res) {\n    return unknown;\n  }\n\n  if (!res.row) {\n    return <div className={className}>Error: No CMS Entry found</div>;\n  }\n\n  if (!fieldMeta) {\n    return unknown;\n  }\n\n  let data = res.row.data?.[fieldMeta.identifier];\n  if (!data) {\n    return null;\n  }\n  if (fieldMeta.type === CmsMetaType.DATE_TIME && dateFormat) {\n    data = dayjs(data).format(dateFormat);\n  }\n  return data\n    ? renderValue(data, fieldMeta.type, {\n        className: `${usePlasmicTheme ? themeResetClassName : \"\"} ${className}`,\n        ...rest,\n      })\n    : null;\n}\n\ninterface CmsCountProps extends CanvasComponentProps<RowContextData> {\n  table: string;\n  className?: string;\n}\n\nexport const cmsCountFieldMeta: ComponentMeta<CmsCountProps> = {\n  name: `${componentPrefix}-count`,\n  displayName: \"CMS Entries Count\",\n  importName: \"CmsCount\",\n  importPath: modulePath,\n  props: {\n    table: {\n      type: \"choice\",\n      displayName: \"Model\",\n      hidden: (props, ctx: TableContextData | null) =>\n        (ctx?.tables?.length ?? 0) <= 1 && !props.table,\n      helpText: \"Pick model from a CMS Data Fetcher\",\n      description:\n        \"Usually not used! Only with multiple CMS Data Loaders, use this to choose which to show. Otherwise, go select the CMS Data Loader if you want to load different data.\",\n      options: (_, ctx) => mkTableOptions(ctx?.tables),\n      defaultValueHint: (_, ctx) => ctx?.table,\n    },\n  },\n};\nexport function CmsCount({\n  className,\n  table,\n  setControlContextData: _,\n  ...rest\n}: CmsCountProps) {\n  const tables = useTablesWithDataLoaded(\"count\");\n  const res = useCount(tables, table);\n  const unknown = (\n    <div className={className} {...rest}>\n      Count: {table ?? \"Unknown Model\"}\n    </div>\n  );\n  if (!res) {\n    return unknown;\n  }\n\n  if (res.count == null) {\n    return null;\n  } else {\n    return (\n      <div className={className} {...rest}>\n        {new Intl.NumberFormat().format(res.count)}\n      </div>\n    );\n  }\n}\n\nconst DEFAULT_TYPE_FILTERS = [CmsMetaType.TEXT];\nfunction deriveInferredTableField(opts: {\n  table?: string;\n  tables?: ApiCmsTable[];\n  field?: string;\n  typeFilters?: CmsType[];\n}) {\n  const { table, tables, field, typeFilters } = opts;\n  if (!table) return undefined;\n  const schema = tables?.find((t) => t.identifier === table)?.schema;\n  const fieldMeta = field\n    ? schema?.fields.find((f) => f.identifier === field)\n    : schema?.fields.find((f) =>\n        (typeFilters ?? DEFAULT_TYPE_FILTERS).includes(f.type)\n      );\n  return fieldMeta;\n}\n\nfunction assertNever(_: never): never {\n  throw new Error(\"unexpected branch taken\");\n}\n\nfunction renderValue(value: any, type: CmsType, props: { className?: string }) {\n  switch (type) {\n    case CmsMetaType.NUMBER:\n    case CmsMetaType.BOOLEAN:\n    case CmsMetaType.TEXT:\n    case CmsMetaType.LONG_TEXT:\n    case CmsMetaType.DATE_TIME:\n    case CmsMetaType.ENUM:\n    case CmsMetaType.REF:\n      return <div {...props}>{value}</div>;\n    case CmsMetaType.RICH_TEXT:\n      return (\n        <div\n          dangerouslySetInnerHTML={{ __html: value }}\n          style={{ whiteSpace: \"normal\" }}\n          {...props}\n        />\n      );\n    case CmsMetaType.IMAGE:\n      if (value && typeof value === \"object\" && value.url && value.imageMeta) {\n        return (\n          <img\n            src={value.url}\n            width={value.imageMeta.width}\n            height={value.imageMeta.height}\n            {...props}\n          />\n        );\n      }\n      return null;\n    case CmsMetaType.FILE:\n      if (value && typeof value === \"object\" && value.url && value.name) {\n        return (\n          <a href={value.url} target=\"_blank\" {...props}>\n            {value.name}\n          </a>\n        );\n      }\n      return null;\n    default:\n      assertNever(type);\n  }\n}\n\ninterface CmsRowLinkProps extends CanvasComponentProps<RowContextData> {\n  table: string;\n  field: string;\n  hrefProp: string;\n  children: React.ReactNode;\n  prefix?: string;\n  suffix?: string;\n}\n\nexport const cmsRowLinkMeta: ComponentMeta<CmsRowLinkProps> = {\n  name: `${componentPrefix}-row-link`,\n  displayName: \"CMS Entry Link\",\n  importName: \"CmsRowLink\",\n  importPath: modulePath,\n  props: {\n    children: {\n      type: \"slot\",\n      defaultValue: {\n        type: \"text\",\n        tag: \"a\",\n        value: \"Link\",\n      },\n    },\n    table: {\n      type: \"choice\",\n      displayName: \"Model\",\n      hidden: (props, ctx: TableContextData | null) =>\n        (ctx?.tables?.length ?? 0) <= 1 && !props.table,\n      helpText: \"Pick model from a CMS Data Fetcher\",\n      description:\n        \"Usually not used! Only with multiple CMS Data Loaders, use this to choose which to show. Otherwise, go select the CMS Data Loader if you want to load different data.\",\n      options: (_: any, ctx: TableContextData | null) =>\n        mkTableOptions(ctx?.tables),\n      defaultValueHint: (_, ctx) => ctx?.table,\n    },\n    field: {\n      type: \"choice\",\n      displayName: \"Field\",\n      description: \"Field (from model schema) to use.\",\n      options: ({ table }: CmsRowLinkProps, ctx: TableContextData | null) =>\n        mkFieldOptions(ctx?.tables, ctx?.table ?? table),\n      defaultValueHint: (_, ctx) =>\n        ctx?.fieldMeta?.name || ctx?.fieldMeta?.identifier,\n    },\n    hrefProp: {\n      type: \"string\",\n      displayName: '\"href\" prop',\n      description: \"Prop to inject into children\",\n      defaultValue: \"href\",\n    },\n    prefix: {\n      type: \"string\",\n      displayName: \"Optional prefix\",\n      description: \"Prefix to prepend to prop value.\",\n      hidden: (_, ctx) => ctx?.fieldMeta?.type === \"file\",\n    },\n    suffix: {\n      type: \"string\",\n      displayName: \"Optional suffix\",\n      description: \"Suffix to append to prop value.\",\n      hidden: (_, ctx) => ctx?.fieldMeta?.type === \"file\",\n    },\n  },\n};\n\nexport function CmsRowLink({\n  table,\n  field,\n  hrefProp,\n  children,\n  setControlContextData,\n  prefix,\n  suffix,\n}: CmsRowLinkProps): React.ReactElement | null {\n  const tables = useTablesWithDataLoaded(\"rows\");\n\n  const res = useRow(tables, table);\n  if (!res || !res.row) {\n    return <>{children}</>;\n  }\n\n  const fieldMeta = deriveInferredTableField({\n    table: res.table,\n    tables,\n    field,\n    typeFilters: [CmsMetaType.FILE, CmsMetaType.TEXT],\n  });\n\n  if (tables) {\n    // TODO: Only include table if __plasmic_cms_row_{table} exists.\n    setControlContextData?.({\n      tables,\n      table: res.table,\n      row: res.row,\n      fieldMeta: fieldMeta,\n    });\n  }\n  if (!fieldMeta) {\n    return <>{children}</>;\n  }\n\n  if (!children) {\n    return null;\n  }\n\n  const value = res.row.data?.[fieldMeta.identifier] || \"\";\n  const childrenWithProps = React.Children.map(children, (child) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        [hrefProp]:\n          fieldMeta.type === CmsMetaType.FILE\n            ? value.url\n            : prefix || suffix\n            ? `${prefix || \"\"}${value}${suffix || \"\"}`\n            : value,\n      });\n    }\n    return child;\n  });\n\n  return <>{childrenWithProps ?? null}</>;\n}\n\ninterface CmsRowImageProps extends CanvasComponentProps<RowContextData> {\n  table: string;\n  field: string;\n  srcProp: string;\n  children: React.ReactNode;\n}\n\nexport const cmsRowImageMeta: ComponentMeta<CmsRowImageProps> = {\n  name: `${componentPrefix}-row-image`,\n  displayName: \"CMS Entry Image\",\n  importName: \"CmsRowImage\",\n  importPath: modulePath,\n  props: {\n    children: {\n      type: \"slot\",\n      defaultValue: {\n        type: \"img\",\n        src: \"https://studio.plasmic.app/static/img/placeholder-full.png\",\n      },\n    },\n    table: {\n      type: \"choice\",\n      displayName: \"Model\",\n      hidden: (props, ctx: TableContextData | null) =>\n        (ctx?.tables?.length ?? 0) <= 1 && !props.table,\n      helpText: \"Pick model from a CMS Data Fetcher\",\n      description:\n        \"Usually not used! Only with multiple CMS Data Loaders, use this to choose which to show. Otherwise, go select the CMS Data Loader if you want to load different data.\",\n      options: (_: any, ctx: TableContextData | null) =>\n        mkTableOptions(ctx?.tables),\n      defaultValueHint: (_, ctx) => ctx?.table,\n    },\n    field: {\n      type: \"choice\",\n      displayName: \"Field\",\n      description: \"Field (from model schema) to use.\",\n      options: ({ table }: CmsRowImageProps, ctx: TableContextData | null) =>\n        mkFieldOptions(ctx?.tables, ctx?.table ?? table, [CmsMetaType.IMAGE]),\n      defaultValueHint: (_, ctx) =>\n        ctx?.fieldMeta?.name || ctx?.fieldMeta?.identifier,\n    },\n    srcProp: {\n      type: \"string\",\n      displayName: 'Image \"src\" prop',\n      description: \"Prop to inject into children\",\n      defaultValue: \"src\",\n    },\n  },\n};\n\nexport function CmsRowImage({\n  table,\n  field,\n  srcProp,\n  children,\n  setControlContextData,\n}: CmsRowImageProps): React.ReactElement | null {\n  const tables = useTablesWithDataLoaded(\"rows\");\n\n  const res = useRow(tables, table);\n  if (!res || !res.row) {\n    return <>{children}</>;\n  }\n\n  const fieldMeta = deriveInferredTableField({\n    table: res.table,\n    tables,\n    field,\n    typeFilters: [CmsMetaType.IMAGE],\n  });\n\n  if (tables) {\n    // TODO: Only include table if __plasmic_cms_row_{table} exists.\n    setControlContextData?.({\n      tables,\n      table: res.table,\n      row: res.row,\n      fieldMeta: fieldMeta,\n    });\n  }\n\n  if (!fieldMeta) {\n    return <>{children}</>;\n  }\n\n  const value = res.row.data?.[fieldMeta.identifier] || \"\";\n  const childrenWithProps = React.Children.map(children, (child) => {\n    if (React.isValidElement(child) && value) {\n      if (typeof value === \"object\" && value.url && value.imageMeta) {\n        return React.cloneElement(child, {\n          [srcProp]: {\n            src: value.url,\n            fullHeight: value.imageMeta.height,\n            fullWidth: value.imageMeta.width,\n          },\n        });\n      }\n      return React.cloneElement(child, { [srcProp]: value });\n    }\n    return child;\n  });\n\n  return <>{childrenWithProps}</>;\n}\n\ninterface CmsRowFieldValueProps extends CanvasComponentProps<RowContextData> {\n  table: string;\n  field: string;\n  valueProp: string;\n  children: React.ReactNode;\n}\n\nexport const cmsRowFieldValueMeta: ComponentMeta<CmsRowFieldValueProps> = {\n  name: `${componentPrefix}-row-value`,\n  displayName: \"CMS Entry Value\",\n  importName: \"CmsRowFieldValue\",\n  importPath: modulePath,\n  props: {\n    children: {\n      type: \"slot\",\n    },\n    table: {\n      type: \"choice\",\n      displayName: \"Model\",\n      hidden: (props, ctx: TableContextData | null) =>\n        (ctx?.tables?.length ?? 0) <= 1 && !props.table,\n      helpText: \"Pick model from a CMS Data Fetcher\",\n      description:\n        \"Usually not used! Only with multiple CMS Data Loaders, use this to choose which to show. Otherwise, go select the CMS Data Loader if you want to load different data.\",\n      options: (_: any, ctx: TableContextData | null) =>\n        mkTableOptions(ctx?.tables),\n      defaultValueHint: (_, ctx) => ctx?.table,\n    },\n    field: {\n      type: \"choice\",\n      displayName: \"Field\",\n      description: \"Field (from model schema) to use.\",\n      options: (\n        { table }: CmsRowFieldValueProps,\n        ctx: TableContextData | null\n      ) => mkFieldOptions(ctx?.tables, ctx?.table ?? table),\n      defaultValueHint: (_, ctx) =>\n        ctx?.fieldMeta?.name || ctx?.fieldMeta?.identifier,\n    },\n    valueProp: {\n      type: \"string\",\n      displayName: \"Value prop\",\n      description: \"Prop to inject into children as\",\n      defaultValue: \"children\",\n    },\n  },\n};\n\nexport function CmsRowFieldValue({\n  table,\n  field,\n  valueProp,\n  children,\n  setControlContextData,\n  ...rest\n}: CmsRowFieldValueProps): React.ReactElement | null {\n  const tables = useTablesWithDataLoaded(\"rows\");\n\n  const res = useRow(tables, table);\n  if (!res || !res.row) {\n    return <>{children}</>;\n  }\n\n  const fieldMeta = deriveInferredTableField({\n    table: res.table,\n    tables,\n    field,\n    typeFilters: [CmsMetaType.TEXT],\n  });\n\n  if (tables) {\n    // TODO: Only include table if __plasmic_cms_row_{table} exists.\n    setControlContextData?.({\n      tables,\n      table: res.table,\n      row: res.row,\n      fieldMeta: fieldMeta,\n    });\n  }\n\n  if (!fieldMeta) {\n    return <>{children}</>;\n  }\n\n  const value = res.row.data?.[fieldMeta.identifier] || \"\";\n  const childrenWithProps = React.Children.map(children, (child) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, { ...rest, [valueProp]: value });\n    }\n    return child;\n  });\n\n  return <>{childrenWithProps}</>;\n}\n","import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport registerGlobalContext, {\n  GlobalContextMeta,\n} from \"@plasmicapp/host/registerGlobalContext\";\nimport {\n  CmsCount,\n  cmsCountFieldMeta,\n  CmsCredentialsProvider,\n  cmsCredentialsProviderMeta,\n  CmsQueryRepeater,\n  cmsQueryRepeaterMeta,\n  CmsRowField,\n  cmsRowFieldMeta,\n  CmsRowFieldValue,\n  cmsRowFieldValueMeta,\n  CmsRowImage,\n  cmsRowImageMeta,\n  CmsRowLink,\n  cmsRowLinkMeta,\n} from \"./components\";\n\nexport function registerAll(loader?: {\n  registerComponent: typeof registerComponent;\n  registerGlobalContext: typeof registerGlobalContext;\n}) {\n  //const registerContext = loader?.registerContext ?? hostRegisterContext;\n  //registerContext(CmsDataProvider, cmsDataProviderMeta);\n\n  const _registerComponent = <T extends React.ComponentType<any>>(\n    Component: T,\n    defaultMeta: ComponentMeta<React.ComponentProps<T>>\n  ) => {\n    if (loader) {\n      loader.registerComponent(Component, defaultMeta);\n    } else {\n      registerComponent(Component, defaultMeta);\n    }\n  };\n\n  const _registerGlobalContext = <T extends React.ComponentType<any>>(\n    Component: T,\n    defaultMeta: GlobalContextMeta<React.ComponentProps<T>>\n  ) => {\n    if (loader) {\n      loader.registerGlobalContext(Component, defaultMeta);\n    } else {\n      registerGlobalContext(Component, defaultMeta);\n    }\n  };\n\n  _registerGlobalContext(CmsCredentialsProvider, cmsCredentialsProviderMeta);\n  _registerComponent(CmsQueryRepeater, cmsQueryRepeaterMeta);\n  _registerComponent(CmsRowField, cmsRowFieldMeta);\n  _registerComponent(CmsRowLink, cmsRowLinkMeta);\n  _registerComponent(CmsRowImage, cmsRowImageMeta);\n  _registerComponent(CmsRowFieldValue, cmsRowFieldValueMeta);\n  _registerComponent(CmsCount, cmsCountFieldMeta);\n}\n\nexport * from \"./api\";\nexport * from \"./components\";\n"],"names":["queryParamsToApi","params","where","limit","offset","order","orderBy","field","dir","desc","undefined","fields","HttpError","_Error","status","message","_this","call","_wrapNativeSuper","Error","API","config","this","_proto","prototype","get","_get","_asyncToGenerator","_regeneratorRuntime","mark","_callee","endpoint","url","URL","host","databaseId","fixedParams","Object","keys","reduce","newObj","key","value","search","URLSearchParams","toString","_context","next","fetch","method","headers","accept","x-plasmic-api-cms-tokens","databaseToken","mode","response","sent","text","json","JSON","parse","_json$error","error","_unused","abrupt","stop","_x","_x2","apply","arguments","fetchTables","_fetchTables","_callee2","wrap","_context2","prev","tables","t0","console","useDraftForTable","table","Array","isArray","useDraft","includes","query","_query","_callee3","_context3","q","stringify","draft","Number","locale","rows","_x3","_x4","count","_count","_callee4","_context4","_x5","_x6","mkApi","mkQueryContextKey","capitalizeFirst","mkRowContextKey","mkCountContextKey","mkModeContextKey","str","_str$","toUpperCase","slice","useDatabase","useSelector","contextPrefix","makeDatabaseCacheKey","rest","_objectWithoutPropertiesLoose","_excluded","DatabaseProvider","_ref","React","DataProvider","name","data","hidden","children","useTables","TablesProvider","_ref2","TableSchemaProvider","_ref3","schema","_tables$find","_tables$","length","find","t","identifier","QueryResultProvider","_ref4","useTablesWithDataLoaded","env","useDataEnv","matchingKeys","pred","concat","reverse","filter","endsWith","getClosestMatchingKeysBy","some","deriveTableId","useRow","row","RowProvider","_ref5","CountProvider","_ref6","mkTableOptions","map","label","mkFieldOptions","tableIdentifier","types","f","type","options","option","push","modulePath","componentPrefix","renderMaybeData","maybeData","renderFn","loaderProps","inEditor","loadingMessage","forceLoadingState","hideIfNotFound","defaultHost","cmsCredentialsProviderMeta","displayName","description","importName","importPath","providesData","props","defaultValue","defaultValueHint","advanced","CmsCredentialsProvider","TablesFetcher","databaseConfig","cacheKey","component","usePlasmicQueryData","isDatabaseConfigured","usePlasmicCanvasContext","cmsQueryRepeaterMeta","defaultStyles","display","width","maxWidth","flexDirection","isRepeated","_","ctx","filterField","_ctx$table","filterValue","ps","multiSelect","_ctx$table2","emptyMessage","forceEmptyState","noLayout","noAutoRepeat","CmsQueryRepeater","_where","setControlContextData","className","node","index","repeatedElement","cmsRowFieldMeta","_ctx$tables$length","_ctx$tables","helpText","_ref8","_ctx$table3","_ctx$fieldMeta","_ctx$fieldMeta2","fieldMeta","dateFormat","_ref9","usePlasmicTheme","themeResetClassName","targetAllTags","objectFit","CmsRowField","_ref10","res","unknown","deriveInferredTableField","typeFilters","_extends","_res$row$data","dayjs","format","dangerouslySetInnerHTML","__html","style","whiteSpace","imageMeta","src","height","href","target","assertNever","renderValue","cmsCountFieldMeta","_ctx$tables$length2","_ctx$tables2","CmsCount","_ref11","_excluded2","useCount","Intl","NumberFormat","DEFAULT_TYPE_FILTERS","opts","cmsRowLinkMeta","tag","_ctx$tables$length3","_ctx$tables3","_ref12","_ctx$table4","_ctx$fieldMeta3","_ctx$fieldMeta4","hrefProp","prefix","_ctx$fieldMeta5","suffix","_ctx$fieldMeta6","CmsRowLink","_ref13","_res$row$data2","childrenWithProps","Children","child","_React$cloneElement","isValidElement","cloneElement","cmsRowImageMeta","_ctx$tables$length4","_ctx$tables4","_ref14","_ctx$table5","_ctx$fieldMeta7","_ctx$fieldMeta8","srcProp","CmsRowImage","_ref15","_res$row$data3","_React$cloneElement3","_React$cloneElement2","fullHeight","fullWidth","cmsRowFieldValueMeta","_ctx$tables$length5","_ctx$tables5","_ref16","_ctx$table6","_ctx$fieldMeta9","_ctx$fieldMeta10","valueProp","CmsRowFieldValue","_ref17","_excluded3","_res$row$data4","_extends2","loader","Component","defaultMeta","_registerComponent","registerComponent","registerGlobalContext"],"mappings":"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"}